// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export type KindEnum = 'CAT' | 'DOG';
}

export interface PersonQueryData {
  person: PersonQueryData.Person,
}

export namespace PersonQueryData {
  export interface Person extends FavoritePetFragmentData {
  }
}

export interface PetQueryData {
  person: PetQueryData.Person,
}

export namespace PetQueryData {
  export interface Pet extends PetDetailsFragmentData {
  }

  export interface Person {
    pets: PetQueryData.Pet[],
  }
}

export interface PetDetailsFragmentData {
  kind: Schema.Kind,
}

export interface FavoritePetFragmentData {
  name: string,
  favoritePet?: FavoritePetFragmentData.Pet | null,
}

export namespace FavoritePetFragmentData {
  export interface Pet extends PetDetailsFragmentData {
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() custom scalars declares them as strings 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export type DateTime = string;
}

export interface DateQueryData {
  date: Schema.DateTime,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() custom scalars declares them as strings 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export type DateTime = string;
}

export interface DateQueryData {
  date?: Schema.DateTime | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() enum types prints the enum type and its type declaration 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export type EpisodeEnum = 'ONE' | 'TWO' | 'THREE';
}

export interface WhichEpisodeQueryData {
  episode: Schema.Episode,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() enum types prints the enum type and its type declaration 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export type EpisodeEnum = 'ONE' | 'TWO' | 'THREE';
}

export interface WhichEpisodeQueryData {
  episode?: Schema.Episode | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() fragments prints fragment definitions 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface PetsFragmentData {
  name: string,
  nickname?: string | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() fragments prints fragment spreads 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

import {PetKindFragmentData} from './subfolder/PetKind.graphql';
import {PersonDetailsFragmentData, EntityNameFragmentData} from './subfolder/another/PersonDetails.graphql';

type NullableFragment<T> = {
  [P in keyof T]?: T[P] | null
}
export interface PetsFragmentData extends NullableFragment<PetKindFragmentData>, NullableFragment<PersonDetailsFragmentData>, EntityNameFragmentData {
  id: string,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() fragments prints inline fragments 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export type KindEnum = 'DOG' | 'CAT';
}

export interface PetsFragmentData {
  id: string,
  kind?: Schema.Kind | null,
  name: string,
  nickname?: string | null,
  favoritePet?: PetsFragmentData.Pet | null,
}

export namespace PetsFragmentData {
  export interface Pet {
    name: string,
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() list types correctly wraps types that are potentially null 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NicknamesQueryData {
  nicknames: string[],
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() list types correctly wraps types that are potentially null 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NicknamesQueryData {
  nicknames: (string | null)[],
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() list types correctly wraps types that are potentially null 3`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NicknamesQueryData {
  nicknames?: string[] | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() list types correctly wraps types that are potentially null 4`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NicknamesQueryData {
  nicknames?: (string | null)[] | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() list types wraps nested lists 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NicknamesQueryData {
  nicknames: (string[] | null)[],
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() list types wraps nested lists 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NicknamesQueryData {
  nicknames?: ((string | null)[] | null)[] | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() mutations prints mutations 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface RenameMutationData {
  rename: RenameMutationData.Person,
}

export namespace RenameMutationData {
  export interface Variables {
    name: string,
  }

  export interface Person {
    name: string,
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() object types fragment spreads prints a partial fragment type when the type restriction is not guaranteed 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

import {EntityNameFragmentData} from './subfolder/MyFragment.graphql';

type NullableFragment<T> = {
  [P in keyof T]?: T[P] | null
}
export interface EntitiesQueryData {
  entities: EntitiesQueryData.Entity[],
}

export namespace EntitiesQueryData {
  export interface Entity extends NullableFragment<EntityNameFragmentData> {
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() object types fragment spreads prints them as union types when the type restriction is guaranteed 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

import {EntityNameFragmentData} from './subfolder/MyFragment.graphql';

export interface EntitiesQueryData {
  entities: EntitiesQueryData.Entity[],
}

export namespace EntitiesQueryData {
  export interface Entity extends EntityNameFragmentData {
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() object types inline fragments forces fields to be nullable when the type restriction is not guaranteed 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface EntitiesQueryData {
  entities: EntitiesQueryData.Entity[],
}

export namespace EntitiesQueryData {
  export interface Entity {
    name?: string | null,
    nickname?: string | null,
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() object types inline fragments treats them as their original nullability when they are guaranteed 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface EntitiesQueryData {
  entities: EntitiesQueryData.Entity[],
}

export namespace EntitiesQueryData {
  export interface Entity {
    name: string,
    nickname?: string | null,
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() object types objects fields nests them inline in the original object 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface ProfileQueryData {
  person?: ProfileQueryData.PersonPerson | null,
}

export namespace ProfileQueryData {
  export interface Pet {
    name: string,
  }

  export interface PersonRelativesPerson {
    name: string,
    favoritePet?: ProfileQueryData.Pet | null,
  }

  export interface PersonPerson {
    name: string,
    age: number,
    relatives: ProfileQueryData.PersonRelativesPerson[],
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints a boolean type 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface MarriedQueryData {
  married: boolean,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints a boolean type 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface MarriedQueryData {
  married?: boolean | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints a float type 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface AgeQueryData {
  age: number,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints a float type 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface AgeQueryData {
  age?: number | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints a string type 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NameQueryData {
  name: string,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints a string type 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface NameQueryData {
  name?: string | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints an ID type 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface ProductIDQueryData {
  id: string,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints an ID type 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface ProductIDQueryData {
  id?: string | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints an integer type 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface AgeQueryData {
  age: number,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() primitive types prints an integer type 2`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export interface AgeQueryData {
  age?: number | null,
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;

exports[`printFile() variables prints out a variable interface and all associated types 1`] = `
"// This file was generated and should not be edited.
/* tslint:disable */

import {DocumentNode} from 'graphql';

export namespace Schema {
  export interface Language {
    code?: string | null,
  }

  export type DateTime = string;

  export type StyleEnum = 'FULL' | 'NICK';

  export interface NameInput {
    style: Style,
    date?: DateTime | null,
    excited: boolean,
    language?: Language | null,
  }
}

export interface NameQueryData {
  name: string,
}

export namespace NameQueryData {
  export interface Variables {
    myInput?: NameInput | null,
  }
}

declare const document: DocumentNode;
export default document;

/* tslint:enable */
"
`;
